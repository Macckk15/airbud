// Generated by gencpp from file drone_controller/MoveDroneWRequest.msg
// DO NOT EDIT!


#ifndef DRONE_CONTROLLER_MESSAGE_MOVEDRONEWREQUEST_H
#define DRONE_CONTROLLER_MESSAGE_MOVEDRONEWREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace drone_controller
{
template <class ContainerAllocator>
struct MoveDroneWRequest_
{
  typedef MoveDroneWRequest_<ContainerAllocator> Type;

  MoveDroneWRequest_()
    : dx(0.0)
    , dy(0.0)
    , dalt(0.0)
    , dyaw(0.0)  {
    }
  MoveDroneWRequest_(const ContainerAllocator& _alloc)
    : dx(0.0)
    , dy(0.0)
    , dalt(0.0)
    , dyaw(0.0)  {
  (void)_alloc;
    }



   typedef double _dx_type;
  _dx_type dx;

   typedef double _dy_type;
  _dy_type dy;

   typedef double _dalt_type;
  _dalt_type dalt;

   typedef double _dyaw_type;
  _dyaw_type dyaw;





  typedef boost::shared_ptr< ::drone_controller::MoveDroneWRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drone_controller::MoveDroneWRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MoveDroneWRequest_

typedef ::drone_controller::MoveDroneWRequest_<std::allocator<void> > MoveDroneWRequest;

typedef boost::shared_ptr< ::drone_controller::MoveDroneWRequest > MoveDroneWRequestPtr;
typedef boost::shared_ptr< ::drone_controller::MoveDroneWRequest const> MoveDroneWRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drone_controller::MoveDroneWRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drone_controller::MoveDroneWRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::drone_controller::MoveDroneWRequest_<ContainerAllocator1> & lhs, const ::drone_controller::MoveDroneWRequest_<ContainerAllocator2> & rhs)
{
  return lhs.dx == rhs.dx &&
    lhs.dy == rhs.dy &&
    lhs.dalt == rhs.dalt &&
    lhs.dyaw == rhs.dyaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::drone_controller::MoveDroneWRequest_<ContainerAllocator1> & lhs, const ::drone_controller::MoveDroneWRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace drone_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::drone_controller::MoveDroneWRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_controller::MoveDroneWRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_controller::MoveDroneWRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_controller::MoveDroneWRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_controller::MoveDroneWRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_controller::MoveDroneWRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drone_controller::MoveDroneWRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "07412add1f140833b90a1495d256d55d";
  }

  static const char* value(const ::drone_controller::MoveDroneWRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x07412add1f140833ULL;
  static const uint64_t static_value2 = 0xb90a1495d256d55dULL;
};

template<class ContainerAllocator>
struct DataType< ::drone_controller::MoveDroneWRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drone_controller/MoveDroneWRequest";
  }

  static const char* value(const ::drone_controller::MoveDroneWRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drone_controller::MoveDroneWRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 dx\n"
"float64 dy\n"
"float64 dalt\n"
"float64 dyaw\n"
;
  }

  static const char* value(const ::drone_controller::MoveDroneWRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drone_controller::MoveDroneWRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dx);
      stream.next(m.dy);
      stream.next(m.dalt);
      stream.next(m.dyaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveDroneWRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drone_controller::MoveDroneWRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drone_controller::MoveDroneWRequest_<ContainerAllocator>& v)
  {
    s << indent << "dx: ";
    Printer<double>::stream(s, indent + "  ", v.dx);
    s << indent << "dy: ";
    Printer<double>::stream(s, indent + "  ", v.dy);
    s << indent << "dalt: ";
    Printer<double>::stream(s, indent + "  ", v.dalt);
    s << indent << "dyaw: ";
    Printer<double>::stream(s, indent + "  ", v.dyaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONE_CONTROLLER_MESSAGE_MOVEDRONEWREQUEST_H
