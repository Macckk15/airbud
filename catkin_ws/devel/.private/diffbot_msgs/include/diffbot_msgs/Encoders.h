// Generated by gencpp from file diffbot_msgs/Encoders.msg
// DO NOT EDIT!


#ifndef DIFFBOT_MSGS_MESSAGE_ENCODERS_H
#define DIFFBOT_MSGS_MESSAGE_ENCODERS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace diffbot_msgs
{
template <class ContainerAllocator>
struct Encoders_
{
  typedef Encoders_<ContainerAllocator> Type;

  Encoders_()
    : ticks()  {
      ticks.assign(0);
  }
  Encoders_(const ContainerAllocator& _alloc)
    : ticks()  {
  (void)_alloc;
      ticks.assign(0);
  }



   typedef boost::array<int32_t, 2>  _ticks_type;
  _ticks_type ticks;





  typedef boost::shared_ptr< ::diffbot_msgs::Encoders_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::diffbot_msgs::Encoders_<ContainerAllocator> const> ConstPtr;

}; // struct Encoders_

typedef ::diffbot_msgs::Encoders_<std::allocator<void> > Encoders;

typedef boost::shared_ptr< ::diffbot_msgs::Encoders > EncodersPtr;
typedef boost::shared_ptr< ::diffbot_msgs::Encoders const> EncodersConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::diffbot_msgs::Encoders_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::diffbot_msgs::Encoders_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::diffbot_msgs::Encoders_<ContainerAllocator1> & lhs, const ::diffbot_msgs::Encoders_<ContainerAllocator2> & rhs)
{
  return lhs.ticks == rhs.ticks;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::diffbot_msgs::Encoders_<ContainerAllocator1> & lhs, const ::diffbot_msgs::Encoders_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace diffbot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::diffbot_msgs::Encoders_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diffbot_msgs::Encoders_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::diffbot_msgs::Encoders_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::diffbot_msgs::Encoders_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diffbot_msgs::Encoders_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diffbot_msgs::Encoders_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::diffbot_msgs::Encoders_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e0f0e0582d1fb8eb1fb134e9dacef19f";
  }

  static const char* value(const ::diffbot_msgs::Encoders_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe0f0e0582d1fb8ebULL;
  static const uint64_t static_value2 = 0x1fb134e9dacef19fULL;
};

template<class ContainerAllocator>
struct DataType< ::diffbot_msgs::Encoders_<ContainerAllocator> >
{
  static const char* value()
  {
    return "diffbot_msgs/Encoders";
  }

  static const char* value(const ::diffbot_msgs::Encoders_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::diffbot_msgs::Encoders_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This is a message to hold number of ticks from Encoders\n"
"# Use an array of size two of type int32 for the two encoders.\n"
"# int32 is used instead of int64 because it is not supporte by Arduino/Teensy.\n"
"# An overflow is also unlikely with the encoders of the DG01D-E \n"
"# motor with its encoder because of its low encoder resolution\n"
"int32[2] ticks\n"
;
  }

  static const char* value(const ::diffbot_msgs::Encoders_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::diffbot_msgs::Encoders_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ticks);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Encoders_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::diffbot_msgs::Encoders_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::diffbot_msgs::Encoders_<ContainerAllocator>& v)
  {
    s << indent << "ticks[]" << std::endl;
    for (size_t i = 0; i < v.ticks.size(); ++i)
    {
      s << indent << "  ticks[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.ticks[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DIFFBOT_MSGS_MESSAGE_ENCODERS_H
